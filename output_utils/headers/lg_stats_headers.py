from typing import List, Tuple, Callable
from class_model.BaseProjectedBatter import BaseProjectedBatter
from class_model.ProjectedPitcher import TotalProjectedPitcher

proj_lg_batter_headers: List[Tuple[str, Callable[[BaseProjectedBatter], any]]] = [
    ["cid", lambda x: x.cid],
    ["full_title", lambda x: x.card_player.full_title],
    ["position", lambda x: x.position],
    ["team", lambda x: x.card_player.team],
    ["year", lambda x: int(x.card_player.year)],
    ["ovr", lambda x: int(x.card_player.ovr)],
    ["bats", lambda x: x.card_player.bats],
    ["throws", lambda x: x.card_player.throws],
    ["con", lambda x: int(x.card_player.con_ovr)],
    ["gap", lambda x: int(x.card_player.gap_ovr)],
    ["pow", lambda x: int(x.card_player.pow_ovr)],
    ["eye", lambda x: int(x.card_player.eye_ovr)],
    ["avk", lambda x: int(x.card_player.avk_ovr)],
    ["babip", lambda x: int(x.card_player.babip_ovr)],
    ["cx", lambda x: int(x.card_player.defensec)],
    ["1bx", lambda x: int(x.card_player.defense1b)],
    ["2bx", lambda x: int(x.card_player.defense2b)],
    ["3bx", lambda x: int(x.card_player.defense3b)],
    ["ssx", lambda x: int(x.card_player.defensess)],
    ["lfx", lambda x: int(x.card_player.defenself)],
    ["cfx", lambda x: int(x.card_player.defensecf)],
    ["rfx", lambda x: int(x.card_player.defenserf)],
    ["pa", lambda x: int(x.tpbs.ovr.pa)],
    ["avg vL", lambda x: float((x.tpbs.vl.singles + x.tpbs.vl.doubles + x.tpbs.vl.triples + x.tpbs.vl.homeruns) / (x.tpbs.vl.pa - x.tpbs.vl.walks))],
    ["avg vR", lambda x: float((x.tpbs.vr.singles + x.tpbs.vr.doubles + x.tpbs.vr.triples + x.tpbs.vr.homeruns) / (x.tpbs.vr.pa - x.tpbs.vr.walks))],
    ["avg", lambda x: float((x.tpbs.ovr.singles + x.tpbs.ovr.doubles + x.tpbs.ovr.triples + x.tpbs.ovr.homeruns) / (x.tpbs.ovr.pa - x.tpbs.ovr.walks))],
    ["obp vL", lambda x: float((x.tpbs.vl.singles + x.tpbs.vl.doubles + x.tpbs.vl.triples + x.tpbs.vl.homeruns + x.tpbs.vl.walks) / (x.tpbs.vl.pa))],
    ["obp vR", lambda x: float((x.tpbs.vr.singles + x.tpbs.vr.doubles + x.tpbs.vr.triples + x.tpbs.vr.homeruns + x.tpbs.vr.walks) / (x.tpbs.vr.pa))],
    ["obp", lambda x: float((x.tpbs.ovr.singles + x.tpbs.ovr.doubles + x.tpbs.ovr.triples + x.tpbs.ovr.homeruns + x.tpbs.ovr.walks) / (x.tpbs.ovr.pa))],
    ["wOBA vL", lambda x: float(x.tpbs.vl.woba)],
    ["wOBA vR", lambda x: float(x.tpbs.vr.woba)],
    ["wOBA", lambda x: float(x.tpbs.ovr.woba)],
    ["BatR", lambda x: float(x.tpbs.ovr.batr)],
    ["wSB", lambda x: float(x.tpbs.ovr.wsb)],
    ["UBR", lambda x: float(x.tpbs.ovr.ubr)],
    ["BsR", lambda x: float(x.tpbs.ovr.bsr)],
    ["ZR", lambda x: float(x.tpbs.ovr.zr)],
    ["Frame Runs", lambda x: float(x.tpbs.ovr.frame_runs)],
    ["Arm Runs", lambda x: float(x.tpbs.ovr.arm_runs)],
    ["Fielding Runs", lambda x: float(x.tpbs.ovr.fielding_runs)],
    ["WAR vL", lambda x: float(x.tpbs.vl.war)],
    ["WAR vR", lambda x: float(x.tpbs.vr.war)],
    ["WAR", lambda x: float(x.tpbs.ovr.war)],
]
proj_lg_batter_hidden_cols = [
    "throws",
    "con",
    "gap",
    "pow",
    "eye",
    "avk",
    "babip",
]

proj_lg_pitcher_headers: List[Tuple[str, Callable[[TotalProjectedPitcher], any]]] = [
    ["cid", lambda x: x.ovr.cid],
    ["full_title", lambda x: x.ovr.card_player.full_title],
    ["team", lambda x: x.ovr.card_player.team],
    ["year", lambda x: int(x.ovr.card_player.year)],
    ["ovr", lambda x: int(x.ovr.card_player.ovr)],
    ["bats", lambda x: x.ovr.card_player.bats],
    ["throws", lambda x: x.ovr.card_player.throws],
    ["stu", lambda x: int(x.ovr.card_player.stu_ovr)],
    ["mov", lambda x: int(x.ovr.card_player.mov_ovr)],
    ["ctl", lambda x: int(x.ovr.card_player.ctl_ovr)],
    ["stm", lambda x: int(x.ovr.card_player.stamina)],
    ["bf", lambda x: float(x.ovr.bf)],
    ["k/9 vL", lambda x: float(x.vl.k_per_9)],
    ["k/9 vR", lambda x: float(x.vr.k_per_9)],
    ["k/9", lambda x: float(x.ovr.k_per_9)],
    ["(bb + hbp)/9 vL", lambda x: float(x.vl.bb_per_9)],
    ["(bb + hbp)/9 vR", lambda x: float(x.vr.bb_per_9)],
    ["(bb + hbp)/9", lambda x: float(x.ovr.bb_per_9)],
    ["hr/9 vL", lambda x: float(x.vl.hr_per_9)],
    ["hr/9 vR", lambda x: float(x.vr.hr_per_9)],
    ["hr/9", lambda x: float(x.ovr.hr_per_9)],
    ["ip/g", lambda x: float(x.ovr.ip_per_g)],
    ["fip vL", lambda x: float(x.ovr.fip)],
    ["fip vR", lambda x: float(x.ovr.fip)],
    ["fip", lambda x: float(x.ovr.fip)],
    ["war against (no other pitchers)", lambda x: (float(x.ovr.only_pit_war_against))],
    ["war against (per game)", lambda x: float(x.ovr.war_against)],
    ["war vL", lambda x: float(x.vl.war)],
    ["war vR", lambda x: float(x.vr.war)],
    ["war", lambda x: float(x.ovr.war)],
    ["war_with_relief vL", lambda x: float(x.vl.war_with_relief)],
    ["war_with_relief vR", lambda x: float(x.vr.war_with_relief)],
    ["war_with_relief", lambda x: float(x.ovr.war_with_relief)],
]